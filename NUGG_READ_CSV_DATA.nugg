<?xml version="1.0" encoding="utf-8"?>
<nugget name="READ_CSV_DATA">
 <CLAS CLSNAME="ZCL_READ_CSV" VERSION="1" LANGU="E" DESCRIPT="Demo Read CSV file to Internal Table" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <method CLSNAME="ZCL_READ_CSV" CMPNAME="READ_CSV_DATA" VERSION="1" LANGU="E" DESCRIPT="Read CSV file" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_READ_CSV" CMPNAME="READ_CSV_DATA" SCONAME="I_FULLPATH" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_READ_CSV" CMPNAME="READ_CSV_DATA" SCONAME="I_COMMA" VERSION="1" LANGU="E" DESCRIPT="Comma" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PARVALUE="&apos;,&apos;"/>
   <parameter CLSNAME="ZCL_READ_CSV" CMPNAME="READ_CSV_DATA" SCONAME="I_HEADER" VERSION="1" LANGU="E" DESCRIPT="Header of File" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="1" TYPE="CHAR1" PARVALUE="&apos;X&apos;"/>
   <parameter CLSNAME="ZCL_READ_CSV" CMPNAME="READ_CSV_DATA" SCONAME="CT_DATA" VERSION="1" LANGU="E" DESCRIPT="Return Data" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="0" TYPTYPE="1" TYPE="STANDARD TABLE"/>
   <exception CLSNAME="ZCL_READ_CSV" CMPNAME="READ_CSV_DATA" SCONAME="READ_FILE" VERSION="1" LANGU="E" DESCRIPT="Error read file" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD READ_CSV_DATA.

    DATA: LW_FULL_PATH TYPE STRING,
          LW_CONTENT   TYPE STRING.
    DATA: LT_STRING     TYPE TABLE OF STRING,
          LW_STRING     TYPE STRING,
          LW_COL_IX     TYPE SY-TABIX,
          LW_LINE_COUNT TYPE SY-TABIX.
    DATA: LO_DATA_LINE TYPE REF TO DATA.
    FIELD-SYMBOLS:
      &lt;LF_LINE&gt;  TYPE ANY,
      &lt;LF_VALUE&gt; TYPE ANY.
    DATA: LW_MESSAGE   TYPE STRING,
          LO_EXCEPTION TYPE REF TO CX_ROOT.


*--------------------------------------------------------------------*
* Doc Thong Tin File CSV
    LW_FULL_PATH  = I_FULLPATH.
    TRY .
        OPEN DATASET LW_FULL_PATH FOR INPUT IN TEXT MODE ENCODING NON-UNICODE
                            WITH SMART LINEFEED MESSAGE LW_MESSAGE.
        IF SY-SUBRC IS NOT INITIAL.
          MESSAGE LW_MESSAGE
            TYPE &apos;E&apos; RAISING READ_FILE.
        ENDIF.
      CATCH CX_ROOT INTO LO_EXCEPTION.
*     Gets error message
        CALL METHOD LO_EXCEPTION-&gt;IF_MESSAGE~GET_TEXT
          RECEIVING
            RESULT = LW_MESSAGE.

        MESSAGE LW_MESSAGE
           TYPE &apos;E&apos; RAISING READ_FILE.
    ENDTRY.

*--------------------------------------------------------------------*
* Assign structure of table dynamic
    CREATE DATA LO_DATA_LINE LIKE LINE OF CT_DATA.
    ASSIGN LO_DATA_LINE-&gt;* TO &lt;LF_LINE&gt;.
    CHECK SY-SUBRC IS INITIAL.

*--------------------------------------------------------------------*
* Load Thong Tin File
    LW_LINE_COUNT = 0.
    DO .
      ADD 1 TO LW_LINE_COUNT.
      READ DATASET LW_FULL_PATH INTO LW_CONTENT.
      IF SY-SUBRC IS NOT INITIAL.
        &quot; Exit Do time
        EXIT.
      ENDIF.
      IF LW_LINE_COUNT = 1 AND I_HEADER = &apos;X&apos;.
        CONTINUE.
      ENDIF.
      &quot; Load Du lieu vao Structure
      CLEAR: LT_STRING.
      LW_COL_IX = 1.
      SPLIT LW_CONTENT AT I_COMMA INTO TABLE LT_STRING.
      LOOP AT LT_STRING INTO LW_STRING.
        ASSIGN COMPONENT LW_COL_IX OF STRUCTURE &lt;LF_LINE&gt; TO &lt;LF_VALUE&gt;.
        CHECK SY-SUBRC IS INITIAL.
        &lt;LF_VALUE&gt; = LW_STRING.
        ADD 1 TO LW_COL_IX.
        UNASSIGN &lt;LF_VALUE&gt;.
      ENDLOOP.
      APPEND &lt;LF_LINE&gt; TO CT_DATA.
    ENDDO.

*--------------------------------------------------------------------*
* Close Dataset after read content
    CLOSE DATASET LW_FULL_PATH.
  ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
